Description: Creates a simple AWS CloudWatch Synthetics heartbeat canary
Parameters:
  EndpointUrl:
    Type: String
    Default: https://google.com/
    Description: The endpoint you wish to monitor, e.g. https://my.example-endpoint.com/
Resources:
  HeartbeatCanaryArtifactsBucketE23FAB5C:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  HeartbeatCanaryArtifactsBucketPolicyAB20BA5F:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: HeartbeatCanaryArtifactsBucketE23FAB5C
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - HeartbeatCanaryArtifactsBucketE23FAB5C
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - HeartbeatCanaryArtifactsBucketE23FAB5C
                        - Arn
                    - /*
        Version: "2012-10-17"
  HeartbeatCanaryServiceRoleD9B33DBB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action: s3:ListAllMyBuckets
                Effect: Allow
                Resource: "*"
              - Action: s3:GetBucketLocation
                Effect: Allow
                Resource:
                  Fn::GetAtt:
                    - HeartbeatCanaryArtifactsBucketE23FAB5C
                    - Arn
              - Action: s3:PutObject
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::GetAtt:
                          - HeartbeatCanaryArtifactsBucketE23FAB5C
                          - Arn
                      - /*
              - Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    cloudwatch:namespace: CloudWatchSynthetics
                Effect: Allow
                Resource: "*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:"
                      - Ref: AWS::Partition
                      - ":logs:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :log-group:/aws/lambda/cwsyn-*
            Version: "2012-10-17"
          PolicyName: canaryPolicy
  HeartbeatCanary43B2C5AC:
    Type: AWS::Synthetics::Canary
    Properties:
      ArtifactS3Location:
        Fn::Join:
          - ""
          - - s3://
            - Ref: HeartbeatCanaryArtifactsBucketE23FAB5C
      Code:
        Handler: index.handler
        Script:
          Fn::Join:
            - ""
            - - |-
                var synthetics = require('Synthetics');
                const log = require('SyntheticsLogger');
                const index = async function () {
                // INSERT URL here
                const URL = "
              - Ref: EndpointUrl
              - |
                ";

                let page = await synthetics.getPage();
                const response = await page.goto(URL, {waitUntil: 'domcontentloaded', timeout: 30000});
                //Wait for page to render.
                //Increase or decrease wait time based on endpoint being monitored.
                await page.waitFor(15000);
                await synthetics.takeScreenshot('loaded', 'loaded');
                let pageTitle = await page.title();
                log.info('Page title: ' + pageTitle);
                if (response.status() !== 200) {
                     throw "Failed to load page!";
                }
                };

                exports.handler = async () => {
                return await index();
                };
      ExecutionRoleArn:
        Fn::GetAtt:
          - HeartbeatCanaryServiceRoleD9B33DBB
          - Arn
      Name: canarystackhearb9d141
      RuntimeVersion: syn-nodejs-puppeteer-3.9
      Schedule:
        DurationInSeconds: "0"
        Expression: rate(5 minutes)
      StartCanaryAfterCreation: true
